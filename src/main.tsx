import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.tsx';
import './i18n';
import './styles/index.css';
import { initializeErrorMonitoring, setupGlobalErrorHandling } from './utils/errorMonitoring.tsx';
import { initializePerformanceMonitoring } from './utils/performanceOptimizer';
import { NotificationProvider } from './contexts/NotificationContext';
import { AuthProvider } from './contexts/AuthContext';

// Initialize error monitoring
initializeErrorMonitoring();
setupGlobalErrorHandling();

// Initialize performance monitoring
const performanceOptimizer = initializePerformanceMonitoring();

// Register service worker for PWA
// Temporarily disabled to fix MIME type error
// if ('serviceWorker' in navigator) {
//   window.addEventListener('load', () => {
//     // Use the service worker path generated by Vite PWA plugin
//     navigator.serviceWorker.register('/service-worker.js')
//       .then((registration) => {
//         console.log('SW registered: ', registration);
//       })
//       .catch((registrationError) => {
//         console.log('SW registration failed: ', registrationError);
//       });
//   });
// }

// Initialize PWA install prompt
// let deferredPrompt: any; // Unused variable
window.addEventListener('beforeinstallprompt', (e) => {
  e.preventDefault();
  deferredPrompt = e;
});

// Performance optimization: Use requestIdleCallback for non-critical initialization
const initializeApp = () => {
  const root = ReactDOM.createRoot(document.getElementById('root')!);
  
  root.render(
    <React.StrictMode>
      <AuthProvider>
        <NotificationProvider>
          <App />
        </NotificationProvider>
      </AuthProvider>
    </React.StrictMode>
  );
};

// Use requestIdleCallback for better performance, fallback to setTimeout
if ('requestIdleCallback' in window) {
  (window as any).requestIdleCallback(initializeApp);
} else {
  setTimeout(initializeApp, 1);
}

// Expose performance optimizer for debugging
if (process.env.NODE_ENV === 'development') {
  (window as any).performanceOptimizer = performanceOptimizer;
} 